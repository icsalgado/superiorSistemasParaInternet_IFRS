A1
	Historia dos SO https://www.youtube.com/watch?v=9rC9GilX1Io
	Historia do Linux https://www.youtube.com/watch?v=tt2nHK0oaSg
	Historia do Windows https://www.youtube.com/watch?v=0Fjwg6q_cfI
	
	Revisão
	SO serve de interface entre usuário e o hardware
	Prioridade e Afinidade - controle no gerenciador de tarefas
	Segurança dos arquivos é responsabilidade do sistema operacional
	Tread - fluxo de execução
	Windows protege acesso ao hardware mas não protege o acesso ao kernel e o Linux não protege o acesso ao hardware e protege o kernel

A2	
	https://www.inf.ufrgs.br/~johann/sisop1/minixpage/#toc9 - instalar minix
	Monolitico - problema, se uma coisa travar trava tudo
	Camadas - muito lento
	Micronúcleos - alta complexidade de gerenciamento
		https://www.tecmundo.com.br/dispositivos-moveis/215460-historia-symbian-sistema-operacional-referencia-do-android-ios.htm
	Exenucleo - alta complexidade para o desenvolvedor
	Uninucleo - Ex. Roteador - exemplo de sistemas embarcados
	VMware/HyperV/KVM são exemplos de hypervisor
	https://www.softwareforeducation.com/

A3
	Pesquisar processo de boot (https://www.tecmundo.com.br/aumentar-desempenho/11266-como-funciona-o-boot-de-um-computador.htm)
	O nome “BIOS” vem do acrônimo Basic Input/Output System (“Sistema básico de entrada e saída”, em tradução livre para português).
	MBR - setor do disco onde está o sistema operacional ou GRUB - O gerenciador de arquivos faz essa função
	Importância da FAT - https://learn.microsoft.com/pt-br/troubleshoot/windows-client/backup-and-storage/fat-hpfs-and-ntfs-file-systems
	
	Tipos de interrupções 
		1 hardware 
		2 software
			driver
			
	Interrupções são feitas para acessar o processador, ou seja, chama o processador.
	Um processo é um conjunto de instruções
	
	contador 0 a 9 em assembler
		Start:
		MOV AL,FB ; 1111 1011
		OUT 02
		MOV AL,B
		OUT 02
		MOV AL,B7 
		OUT 02
		MOV AL,9F ; 1001 1111
		OUT 02
		MOV AL,4F ; 0100 1111
		OUT 02
		MOV AL,DD ; 1101 1101
		OUT 02
		MOV AL,FD ; 1111 1101
		OUT 02
		MOV AL,8B ; 1000 1011
		OUT 02
		MOV AL,FF ; 1111 1111
		OUT 02
		MOV AL,CF ; 1100 1111
		OUT 02
		JMP Start
		END
	Básico do elevador
		Start:
		MOV AL, 1
		OUT 06

		IN 06
		CMP AL, 5 ; compara se o 5 está em AL
		JZ Poweroff ; pula conforme a comparação acima é verdadeira equivalente a um if

		JMP Start ; equivalente a um else

		Poweroff:
		MOV AL, 2
		OUT 6

		END
	
	https://www.spartacussystem.com.br/home/sistemas-operacionais/unix/xenserver/instalando-xenserver]
	https://definirtec.com/kvm-hypervisor/
	https://linuxuniverse.com.br/linux/qemu
	
	Containers
		isolamento total
		sem SO, apenas recursos necessários
	
	Em sistemas exonucleo a aplicação vai acessar o hardware
A4
	Programa é estático, binarios que executarão uma função para resolver um problema
	Tarefas (Threads e processos) - execução de um programa
		tarefas podem ter mais de um processo
		possui estados
		comportamento
		duração
		importância
		O gerenciamento de tarefas
			monotarefa
				uma tarefa por vez
				sem módulo monitor - programador feito por humanos
				com módulo monitor - fila de programas controlado por esse programa de controle
				estados
					nova
					rodando
					terminada
				Problema
					fica esperando dados e o processador fica ocioso
			multitarefas
				uma tarefa ativa e as demais prontas, esperando ou suspensas
				enquanto uma tarefa esta pronta, aguardando dados, o processador executa outra tarefa (preemptivo)
				estados
					novo
					pronto  <<<<<<<<<<<<
					rodando > suspenso /\ (aguardando dados)
					finalizado
				evita que o processador fique ocioso
				Problema
					loops infinitos - a tarefa vai ficar executando sem nunca terminar
			tempo compartilhado
				Prazo de processamento
				todas as tarefas tem um tempo para usar o processador (quantum)
		Ciclo de vida de uma tarefa
			nova > pronta
			pronta > executando
			executando > pronta
			executando > suspensa
			suspensa > pronta
			executando > terminada
			terminada > descarregada
		Troca de contexto
			é preciso guardar todos os parâmetros da tarefa que foi removida da execução por tempo (dispatcher guarda esse estado no TCB)
			isso só ocorre em tempo compartilhado
	A thread pode ser dita como uma subrotina de um processo, ou seja, a thread é um processo simplicficado
		todo processo é uma thread, um processo pode ter mais de uma thread
		as threads podem ser executadas de forma sincrona ou assincrona
		lidar com threads pode deixar a execução do programa mais rápido porém é preciso observar o gargalo, por exemplo saídas de texto e escrita de disco
		http://linguagemc.com.br/arquivos-em-c-categoria-usando-arquivos/ - exemplo para escrever em arquivos
A5
	github não salvou =´[

A6
	Programa em execução é um PROCESSO com estados, ocupando recursos
		no mínimo uma thread rodando
	A THREAD não vai duplicar toda a pilha de execução de um processo
		a comunicação é mais simples por que compartilha espaço de memória, porém pode ocorrer deadlock
		
	O escalonador de tarefas pode ser comparado ao controlador de voo
